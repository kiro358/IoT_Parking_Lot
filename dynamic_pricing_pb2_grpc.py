# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dynamic_pricing_pb2 as dynamic__pricing__pb2


class DynamicPricingServiceStub(object):
    """Define a service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDynamicPricing = channel.unary_unary(
                '/dynamicpricing.DynamicPricingService/GetDynamicPricing',
                request_serializer=dynamic__pricing__pb2.PricingRequest.SerializeToString,
                response_deserializer=dynamic__pricing__pb2.PricingResponse.FromString,
                )
        self.GetHistoricalPricing = channel.unary_unary(
                '/dynamicpricing.DynamicPricingService/GetHistoricalPricing',
                request_serializer=dynamic__pricing__pb2.HistoricalPricingRequest.SerializeToString,
                response_deserializer=dynamic__pricing__pb2.HistoricalPricingResponse.FromString,
                )


class DynamicPricingServiceServicer(object):
    """Define a service
    """

    def GetDynamicPricing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistoricalPricing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DynamicPricingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDynamicPricing': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDynamicPricing,
                    request_deserializer=dynamic__pricing__pb2.PricingRequest.FromString,
                    response_serializer=dynamic__pricing__pb2.PricingResponse.SerializeToString,
            ),
            'GetHistoricalPricing': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHistoricalPricing,
                    request_deserializer=dynamic__pricing__pb2.HistoricalPricingRequest.FromString,
                    response_serializer=dynamic__pricing__pb2.HistoricalPricingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dynamicpricing.DynamicPricingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DynamicPricingService(object):
    """Define a service
    """

    @staticmethod
    def GetDynamicPricing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamicpricing.DynamicPricingService/GetDynamicPricing',
            dynamic__pricing__pb2.PricingRequest.SerializeToString,
            dynamic__pricing__pb2.PricingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHistoricalPricing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamicpricing.DynamicPricingService/GetHistoricalPricing',
            dynamic__pricing__pb2.HistoricalPricingRequest.SerializeToString,
            dynamic__pricing__pb2.HistoricalPricingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
